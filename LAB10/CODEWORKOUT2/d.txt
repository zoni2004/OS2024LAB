**i. Reader Priority (No unnecessary reader waiting):**
To ensure that no reader is kept waiting unnecessarily, the reader function must allow multiple readers to access the shared resource concurrently as long as no writer currently holds the lock. If a writer is waiting but has not yet obtained the lock, new readers should still be allowed to proceed. This can be achieved by using a mechanism such as a `readCount` variable protected by a mutex, where the first reader locks the shared resource and the last reader unlocks it. Writers only get access once all readers are done, but their presence should not prevent new readers from starting unless they are actively writing. This ensures reader preference and avoids unnecessary delays for readers when a writer is only waiting, not writing.

**ii. Writer Priority (No new readers if writer is waiting):**
To ensure that writers are not starved and can write as soon as possible, the system must prevent new readers from starting once a writer has indicated its intention to write. This typically requires a flag or semaphore such as `writeRequest` or a queue-based approach to block further readers from entering if a writer is queued. While current readers are allowed to finish, no additional readers are allowed in once a writer is waiting, ensuring that the writer gets access as soon as all current readers finish. This writer-priority condition prevents indefinite delays for writers and ensures timely access to the shared resource.
